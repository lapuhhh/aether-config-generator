import customtkinter as ctk
from tkinter import messagebox, filedialog
from pathlib import Path
import base64
import json
import os
from canvas_utils import delete_all_points, redraw_all

def encrypt_data(data):
    """Шифрует данные с помощью base64."""
    json_data = json.dumps(data)
    encoded_bytes = base64.b64encode(json_data.encode('utf-8'))
    return encoded_bytes.decode('utf-8')

def decrypt_data(encrypted_data):
    """Расшифровывает данные из base64."""
    try:
        decoded_bytes = base64.b64decode(encrypted_data.encode('utf-8'))
        json_data = decoded_bytes.decode('utf-8')
        return json.loads(json_data)
    except (base64.binascii.Error, json.JSONDecodeError, UnicodeDecodeError):
        return None

def export_points(app):
    """Экспортирует точки и кастомные команды в зашифрованный файл."""
    if not app.points:
        messagebox.showerror("Error", "No points to export")
        return
        
    file_path = filedialog.asksaveasfilename(
        defaultextension=".txt",
        filetypes=[("Text files", "*.txt"), ("All files", "*.*")],
        title="Save points file"
    )
    
    if not file_path:
        return
        
    try:
        export_data = {
            'points': app.points,
            'point_counter': app.point_counter,
            'bind_key': app.bind_key.get(),
            'folder_name': app.folder_name.get(),
            'commands': app.commands_text.get("0.0", "end").strip(),
            'per_point_commands': {str(k): v for k, v in app.per_point_commands.items()},
            'scale_factor': app.scale_factor
        }
        
        encrypted_data = encrypt_data(export_data)
        
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(encrypted_data)
            
        app.status_var.set(f"Points and commands exported to {os.path.basename(file_path)}")
        messagebox.showinfo("Success", f"Points and commands successfully exported to:\n{file_path}")
        
    except Exception as e:
        messagebox.showerror("Error", f"Failed to export points and commands: {str(e)}")

def import_points(app):
    """Импортирует точки и кастомные команды из зашифрованного файла."""
    file_path = filedialog.askopenfilename(
        filetypes=[("Aether cfg", "*.txt"), ("All files", "*.*")],
        title="Open txt file (config)"
    )
    
    if not file_path:
        return
        
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            encrypted_data = f.read().strip()
            
        import_data = decrypt_data(encrypted_data)
        
        if not import_data or 'points' not in import_data:
            messagebox.showerror("Error", "Invalid or corrupted points file")
            return
            
        # Очищаем текущие точки и команды
        delete_all_points(app)
        
        # Загружаем импортированные данные
        app.points = import_data['points']
        app.point_counter = import_data.get('point_counter', len(app.points) + 1)
        app.scale_factor = import_data.get('scale_factor', 1.0)
        
        if 'bind_key' in import_data:
            app.bind_key.set(import_data['bind_key'])
        if 'folder_name' in import_data:
            app.folder_name.set(import_data['folder_name'])
        if 'commands' in import_data:
            app.commands_text.delete("0.0", "end")
            app.commands_text.insert("0.0", import_data['commands'])
        if 'per_point_commands' in import_data:
            app.per_point_commands = {int(k): v for k, v in import_data['per_point_commands'].items()}
        
        # Перерисовываем
        redraw_all(app)
        
        app.status_var.set(f"Points and commands imported from {os.path.basename(file_path)}")
        messagebox.showinfo("Success", f"Successfully imported {len(app.points)} points and commands")
        
    except Exception as e:
        messagebox.showerror("Error", f"Failed to import points and commands: {str(e)}")

def generate_configs(app):
    """Генерирует конфигурационные файлы."""
    if not app.points:
        messagebox.showerror("Error", "No points to generate configs")
        return
    
    default_cmds = app.commands_text.get("0.0", "end").strip().split('\n')
    appdata_path = Path(os.environ['APPDATA'])
    folder_path = appdata_path / "DDnet" / app.folder_name.get()
    folder_path.mkdir(parents=True, exist_ok=True)
    
    for i, (x, y, num) in enumerate(app.points):
        next_index = (i + 1) % len(app.points)
        next_num = app.points[next_index][2]
        opposite_x = -x
        opposite_y = y
        
        config_content = f"# generated by lapuhhh \n# discord: lapuhhh \n\nbind {app.bind_key.get()} \"exec {app.folder_name.get()}/{next_num}\"\n"
        
        cmds = app.per_point_commands.get(num, '\n'.join(default_cmds)).split('\n')
        
        for cmd in cmds:
            if cmd.strip():
                processed_cmd = cmd.strip()
                processed_cmd = processed_cmd.replace("%coord%", f"{x} {-y}")
                processed_cmd = processed_cmd.replace("%opposite%", f"{opposite_x} {opposite_y}")
                processed_cmd = processed_cmd.replace("%next%", f"{next_num}")
                config_content += f"{processed_cmd}\n"
        
        config_file = folder_path / f"{num}"
        with open(config_file, 'w', encoding='utf-8') as f:
            f.write(config_content)
    
    bind_info = f"bind {app.bind_key.get()} \"exec {app.folder_name.get()}/1\""
    with open(folder_path / "✦ bind_info.txt", 'w', encoding='utf-8') as f:
        f.write(bind_info)
    
    app.info_text.configure(state="normal")
    app.info_text.delete("0.0", "end")
    app.info_text.insert("0.0", f"Configs generated successfully!\n\nFolder: {folder_path}\n\nUse command:\n{bind_info}")
    app.info_text.configure(state="disabled")
    app.status_var.set("Configs generated successfully!")
    messagebox.showinfo("Success", f"Configs generated!\n\nUse command:\n{bind_info}")